// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

part of 'package:chess_app/engine/c_engine_api.dart'; // Line added by EJRP

class _NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  _NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  _NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<_Moves> getValidMoves(
    ffi.Pointer<_GameState> gameState,
    ffi.Pointer<_GameState> previousStates,
    int nbStatesReached,
  ) {
    return _getValidMoves(
      gameState,
      previousStates,
      nbStatesReached,
    );
  }

  late final _getValidMovesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<_Moves> Function(ffi.Pointer<_GameState>,
              ffi.Pointer<_GameState>, ffi.Int)>>('getValidMoves');
  late final _getValidMoves = _getValidMovesPtr.asFunction<
      ffi.Pointer<_Moves> Function(
          ffi.Pointer<_GameState>, ffi.Pointer<_GameState>, int)>();

  ffi.Pointer<_GameState> createState(
    ffi.Pointer<ffi.Int> boardArray,
    int colorToGo,
    int castlinPerm,
    int enPassantTargetSquare,
    int turnsForFiftyRule,
    int nbMoves,
  ) {
    return _createState(
      boardArray,
      colorToGo,
      castlinPerm,
      enPassantTargetSquare,
      turnsForFiftyRule,
      nbMoves,
    );
  }

  late final _createStatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<_GameState> Function(ffi.Pointer<ffi.Int>, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('createState');
  late final _createState = _createStatePtr.asFunction<
      ffi.Pointer<_GameState> Function(
          ffi.Pointer<ffi.Int>, int, int, int, int, int)>();

  ffi.Pointer<_GameState> setGameStateFromFenString(
    ffi.Pointer<ffi.Char> fenString,
    ffi.Pointer<_GameState> result,
  ) {
    return _setGameStateFromFenString(
      fenString,
      result,
    );
  }

  late final _setGameStateFromFenStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<_GameState> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<_GameState>)>>('setGameStateFromFenString');
  late final _setGameStateFromFenString =
      _setGameStateFromFenStringPtr.asFunction<
          ffi.Pointer<_GameState> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<_GameState>)>();
}

/// This is a dynamic array of integers. You can use the
/// da_append macro to append integer to this list
class _intList extends ffi.Struct {
  external ffi.Pointer<ffi.Int> items;

  @ffi.Int()
  external int count;

  @ffi.Int()
  external int capacity;
}

/// Dynamic array of moves
/// The structure is copied from Sebastian Lague chess program
/// A move is a 16 bit number
/// bit 0-5: from square (0 to 63)
/// bit 6-11: to square (0 to 63)
/// bit 12-15: flag
class _moves extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedShort> items;

  @ffi.Int()
  external int count;

  @ffi.Int()
  external int capacity;
}

class _gameState extends ffi.Struct {
  external ffi.Pointer<ffi.Int> boardArray;

  @ffi.Int()
  external int colorToGo;

  @ffi.Int()
  external int castlinPerm;

  @ffi.Int()
  external int enPassantTargetSquare;

  @ffi.Int()
  external int turnsForFiftyRule;

  @ffi.Int()
  external int nbMoves;
}

abstract class _Flag {
  static const int NOFlAG = 0;
  static const int EN_PASSANT = 1;
  static const int DOUBLE_PAWN_PUSH = 2;
  static const int KING_SIDE_CASTLING = 3;
  static const int QUEEN_SIDE_CASTLING = 4;
  static const int PROMOTE_TO_QUEEN = 5;
  static const int PROMOTE_TO_KNIGHT = 6;
  static const int PROMOTE_TO_ROOK = 7;
  static const int PROMOTE_TO_BISHOP = 8;
  static const int STALEMATE = 9;
  static const int CHECKMATE = 10;
  static const int DRAW = 11;
}

abstract class _PIECE {
  static const int NONE = 0;
  static const int KING = 1;
  static const int QUEEN = 2;
  static const int KNIGHT = 3;
  static const int BISHOP = 4;
  static const int ROOK = 5;
  static const int PAWN = 6;
  static const int WHITE = 8;
  static const int BLACK = 16;
}

/// Dynamic array of moves
/// The structure is copied from Sebastian Lague chess program
/// A move is a 16 bit number
/// bit 0-5: from square (0 to 63)
/// bit 6-11: to square (0 to 63)
/// bit 12-15: flag
typedef _Moves = _moves;
typedef _GameState = _gameState;

const int _BOARD_SIZE = 64;

const int _pieceColorBitMask = 24;

const int _pieceTypeBitMask = 7;

const int _DA_INIT_CAP = 256;
